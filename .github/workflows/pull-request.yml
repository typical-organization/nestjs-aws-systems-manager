# Pull Request Build & Test CI
# Runs linting, testing, and building across multiple Node.js versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: PR Build & Test CI

on:
  push:
    branches: [ develop, main, 'feature/**' ]
  pull_request:
    branches: [ develop, main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Check formatting
        run: npx prettier --check "src/**/*.ts"

  test:
    name: Test (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [ 20.x, 22.x, 24.x ]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v5
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npm run test:cov

      - name: Enforce coverage thresholds
        run: |
          node -e "
          const coverage = require('./coverage/coverage-summary.json');
          const total = coverage.total;
          const thresholds = { statements: 80, branches: 80, functions: 80, lines: 80 };
          
          let failed = false;
          Object.entries(thresholds).forEach(([key, threshold]) => {
            const actual = total[key].pct;
            if (actual < threshold) {
              console.error(\`❌ \${key} coverage \${actual}% is below threshold \${threshold}%\`);
              failed = true;
            } else {
              console.log(\`✅ \${key} coverage \${actual}% meets threshold \${threshold}%\`);
            }
          });
          
          if (failed) process.exit(1);
          "

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: matrix.node-version == '24.x'
        continue-on-error: true
        with:
          files: ./coverage/coverage-final.json
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  build:
    name: Build (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [ 20.x, 22.x, 24.x ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v5
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Verify dist directory
        run: |
          if [ ! -d "dist" ]; then
            echo "Error: dist directory not found"
            exit 1
          fi
          echo "✅ Build artifacts verified:"
          ls -la dist/

      - name: Check for TypeScript errors
        run: npx tsc --noEmit

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
      
      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate

  aws-sdk-check:
    name: AWS SDK Compatibility Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check AWS SDK peer dependency versions
        run: |
          PACKAGE_SSM=$(node -p "require('./package.json').peerDependencies['@aws-sdk/client-ssm']")
          PACKAGE_SECRETS=$(node -p "require('./package.json').peerDependencies['@aws-sdk/client-secrets-manager']")
          
          echo "Required AWS SDK versions:"
          echo "  @aws-sdk/client-ssm: $PACKAGE_SSM"
          echo "  @aws-sdk/client-secrets-manager: $PACKAGE_SECRETS"
          
          # Check if versions are in sync
          if [ "$PACKAGE_SSM" != "$PACKAGE_SECRETS" ]; then
            echo "⚠️ Warning: AWS SDK versions are not in sync"
          else
            echo "✅ AWS SDK versions are in sync"
          fi
